{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Calibri;\f1\fnil\fcharset0 Calibri-Bold;\f2\ftech\fcharset77 Symbol;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl259\slmult1\sa160\qc\partightenfactor0

\f0\fs44 \cf2 Chap 11\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 1.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b0\fs22 \cf2 Ans:\
A template is a simple and yet very powerful tool in C++. The simple idea is to pass data type as a parameter so that we don\'92t need to write the same code for different data types.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 \
2.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b0\fs22 \cf2 Ans: The fundamental difference between Java and C++ implement collections:\
In Java an ArrayList contains a list of Objects. Because Object is a superclass of all classes, you can put any kind of object in an ArrayList. You can\'92t do this in C++.\
C++ has a standard set of collections templates, known as the Standard Template Library or STL, that are analogous to Java\'92s collections\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 3.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b0\fs22 \cf2 Ans:\
An individual class defines how a group of objects can be constructed, while a class template defines how a group of classes can be generated.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 7.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b0\fs22 \cf2 Ans:\
In Java you declare a list of strings like this:\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\f2 \cf2 {\listtext	\uc0\u8226 	}
\f0 ArrayList<String> strings;\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 and in C++ you declare:\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls2\ilvl0
\f2 \cf2 {\listtext	\uc0\u8226 	}
\f0 std::vector<std::string> strings;\uc0\u8232 \
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 In Java no matter what you put in the <>s, the ArrayList contains Objects. You are just specifying that those Objects will automatically be cast to Strings. In Java the <> is optional. The ArrayList would work just fine without it. You would just have to do a bunch of explicit casting. In C++, the <> means you are creating an entirely new class that is custom-written to contain std::strings.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs24 \cf2 8.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b0\fs22 \cf2 Ans:\
A reference is a pointer on a physical level, however because the compiler needs to instantiate functions that take references to your element type, and because C++ can't handle double references, So, storing reference in a container is impossible.}