{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Calibri-Bold;\f2\fnil\fcharset0 Calibri;
\f3\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Chapter 8 Short Answers \
\
\
// 
\f1\b\fs28 \cf2 1.
\f2\b0\fs22  What is wrong with the following code and how would you fix it?\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 #ifndef PROJECTILE_H\
#define PROJECTILE_H\
class Projectile \{\
private:\
double position;\
double velocity;\
public:\
Projectile(double position, double velocity);\
virtual \'98Projectile();\
double getPosition() const;\
double getVelocity() const;\
\} // end of Projecile class\
#endi\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b \cf2 Ans
\f2\b0 : We cannot define the class constructor with type virtual.\
We can fix the code by removing the word virtual. And semi column missing after class definition. Fixed Code:\
#ifndef PROJECTILE_H\
#define PROJECTILE_H\
class Projectile \{\
private:\
double position;\
double velocity;\
public:\
Projectile(double position, double velocity);\
Projectile();\
double getPosition() const;\
double getVelocity() const;\
\}; // end of Projecile class\
#endif\
\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 2. \
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans: 
\f2\b0 In the definition of constructor the value is getting assigned with this Operator.  There is syntax error in the code. \
Fixed code:\
Projectile(int position, int velocity) \{\
	this->position = position;\
	this->velocity = velocity;\
\} // end of constructor\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 3.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f2\b0 \cf2 (a) int* method(int* arg);\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f2 This method will receive a pointer of type int as parameter and return a pointer of type int.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 (b) const int* method(int* arg);\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls2\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f2 This method will receive a pointer of type int as parameter and const before method indicates that the return type is const.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 (c) const int* const method(int* arg);\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls3\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f2 This method will receive a pointer of type int as parameter. This is a const pointer to a const and the return type is const.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 (d) const int* const method(const int* arg);\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls4\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f2 This method will receive a const pointer of type int as parameter which cannot be modified. This is a const pointer to a const and the return type is const.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 (e) const int* const method(const int* arg) const;\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls5\ilvl0
\f3 \cf2 {\listtext	\uc0\u8226 	}
\f2 This method will receive a const pointer of type int as parameter which cannot be modified. This is a const pointer to a const and the return type is const and returns a pointer to an int that can be modified, but the method itself does not modify its object.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0
\cf2 \

\f1\b\fs28 5\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f2\b0 \cf2 The \'93pointer\'94 and \'93reference\'94 both are used to point or refer an another variable. But, the basic difference among both of them is that a pointer variable points to a variable whose memory location is stored in it. The reference variable is an alias for a variable which is assigned to it.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b \cf2 Pointer
\f2\b0 :\
A pointer is a variable that holds memory address of another variable. A pointer needs to be dereferenced with * operator to access the memory location it points to.\

\f1\b Reference
\f2\b0 :\
A reference variable is an alias, that is, another name for an already existing variable. A reference, like a pointer, is also implemented by storing the address of an object.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b\fs28 \cf2 10.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f2\b0 \cf2 you will get a compiler error if you try to modify the value of variable i.e., value inside the function's body, as they are marked as const.\
Instead, you can change those values if you omit the const.\
That is why we never declare method like this.\
}