{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Calibri-Bold;\f1\fnil\fcharset0 Calibri;\f2\ftech\fcharset77 Symbol;
\f3\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red24\green25\blue27;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c12549\c12941\c14118;\cssrgb\c100000\c100000\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b\fs28 \cf2 2.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b0 \cf2 The core concept is ownership. At any given time, you designate one particular object as the \'93owner\'94 of a piece of data. If an object owns a piece of data, it is responsible for deleting it, usually in the object\'92s destructor\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b\fs28 \cf2 6.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b0 \cf2 The rule of five specifies that if a class implements any of the following functions, it should implement all of them:\
\pard\tx360\tx720\pardeftab720\li720\fi-720\sl259\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\f2 \cf2 {\listtext	\uc0\u8226 	}
\f1 copy constructor\
\ls1\ilvl0
\f2 {\listtext	\uc0\u8226 	}
\f1 copy assignment operator\
\ls1\ilvl0
\f2 {\listtext	\uc0\u8226 	}
\f1 destructor\
\ls1\ilvl0
\f2 {\listtext	\uc0\u8226 	}
\f1 move constructor\
\ls1\ilvl0
\f2 {\listtext	\uc0\u8226 	}
\f1 move assignment operator\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b\fs28 \cf2 7.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans: 
\f1\b0 \
Copy elision is a rule that permits a C++ compiler to ignore the creation of the temporary and its subsequent copy/destruction. That is, the compiler can take the initializing expression for the temporary and initialize the function's return value from it directly. This obviously saves performance.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b\fs28 \cf2 8.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1\b0 \cf2 The copying will copy the elements of the resource, while the moving will move the elements of the resource\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f0\b\fs28 \cf2 12.\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\fs22 \cf2 Ans:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f3\b0 \cf3 \cb4 Declaration of an identifier to tell the compiler about an identifier that isn't actually defined until later.\
For Ex:\
\pard\pardeftab720\sl259\slmult1\sa160\partightenfactor0

\f1 \cf2 \cb1 class Projectile \{\
public:\
Projectile(double position, double velocity);\
\};\
In Projectile class we have made a simple statement that \'93There is a constructor called Projectile for class Projectile\'94. This is called a forward declaration.}